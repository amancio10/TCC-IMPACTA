unit Controller.Customer;

interface

uses
  MVCFramework,
  MVCFramework.Commons,
  MVCFramework.Serializer.Commons,
  System.Generics.Collections,
  Controller.VariaveisAmbiente;


type
  [MVCNameCase(ncCamelCase)]
  TAPIDados = class
  Private
    FPergunta: string;
    FEmail: string;
    FSenha: string;
    FNome: string;
    FId: integer;
  Public
    property Pergunta: string read FPergunta write FPergunta;
    property Email: string read FEmail write FEmail;
    property Senha: string read FSenha write FSenha;
    property Nome: string read FNome write FNome;
    property Id: integer read FId write FId;
  end;

  [MVCPath('/api')]
  TCustomer = class(TMVCController)
  public
    //
  protected
    procedure OnBeforeAction(Context: TWebContext; const AActionName: string; var Handled: Boolean); override;
    procedure OnAfterAction(Context: TWebContext; const AActionName: string); override;

  public
    [MVCPath('/perguntar')]
    [MVCHTTPMethod([httpPOST])]
    procedure CreateAPIDados([MVCFromBody] APIDados: TAPIDados);

    [MVCPath('/login')]
    [MVCHTTPMethod([httpPOST])]
    procedure ValidateLogin([MVCFromBody] APIDados: TAPIDados);

    [MVCPath('/register')]
    [MVCHTTPMethod([httpPOST])]
    procedure CreateRegister([MVCFromBody] APIDados: TAPIDados);
  end;

implementation

uses
  System.SysUtils,
  MVCFramework.Logger,
  System.StrUtils,
  JsonDataObjects,
  System.JSON,
  Controller.DmConexao,
  System.Classes;

procedure TCustomer.CreateRegister(APIDados: TAPIDados);
var
  SQL           : TStringList;
begin
  {$REGION 'SQL'}
  try
    SQL := TStringList.Create();
    SQL.Add('INSERT');
    SQL.Add('INTO USUARIOS(');
    SQL.Add('ID,');
    SQL.Add('NOME,');
    SQL.Add('EMAIL,');
    SQL.Add('SENHA)');
    SQL.Add('VALUES(');
    SQL.Add(Format('%D', [APIDados.Id]));
    SQL.Add(Format('''%S''', [APIDados.Nome]));
    SQL.Add(Format('''%S''', [APIDados.Email]));
    SQL.Add(Format('''%S''', [APIDados.Senha]));
    SQL.Add(')');

    DMConexao := TDMConexao.Create(nil);
    with DMConexao do
    begin
       Render(CreateRegister(SQL.Text)); 
    end;
  finally
    FreeAndNil(SQL);
    FreeAndNil(DMConexao);
  end;
  {$ENDREGION}
end;

procedure TCustomer.OnAfterAction(Context: TWebContext; const AActionName: string);
begin
  inherited;
end;

procedure TCustomer.OnBeforeAction(Context: TWebContext; const AActionName: string; var Handled: Boolean);
begin
  inherited;
end;

procedure TCustomer.ValidateLogin(APIDados: TAPIDados);
var
  SQL          : String;           
begin
  {$REGION 'Faz Login'}
  try
    DMConexao := TDMConexao.Create(nil);
    with DMConexao do
    begin
      SQL := QueryBuilder(APIDados.Email, APIDados.Senha);
      if FindLogin(SQL) then
        Render('{"return": True}')
      else
        Render('{"return": False}')
    end;
  finally
    FreeAndNil(DMConexao);
  end;

  {$ENDREGION}
end;

procedure TCustomer.CreateAPIDados([MVCFromBody] APIDados: TAPIDados);
var
  Response       : TJSONObject;
  Retorno        : TJSONObject;
  JSONBody       : TJSONObject;
  Content        : TJSONObject;
  ContentsArray  : TJSONArray;
  PartsArray     : TJSONArray;
  Parts          : TJSONArray;
  Candidates     : TJSONArray;
  Prompt         : TStringList;
  Complemento    : TStringList;
  URLBase, Key   : string;
  Devolver       : string;
  ExecutablePath : string;
  SQL            : string;
begin
  Response := TJSONObject.Create;

 {$Region 'Chama o Gemini'}

  try
    DMConexao := TDMConexao.Create(nil);
    with DMConexao do
    begin
      TVariaveisAmbiente.LerVariaveisGemini(URLBase, Key, Devolver);
      TVariaveisAmbiente.GetExecutablePath(ExecutablePath);

      Prompt      := TStringList.Create;
      Complemento := TStringList.Create;
      JSONBody    := TJSONObject.Create;

      RESTClient.BaseURL := URLBase + Key;
      
      {$Region 'Envio'}
      try
        Prompt.LoadFromFile(ExecutablePath + '\prompt.config');
        Complemento.LoadFromFile(ExecutablePath + '\complemento.config');

        Prompt.Add(complemento.Text);
        Prompt.Add(APIDados.Pergunta);

        ContentsArray := TJSONArray.Create;
        PartsArray    := TJSONArray.Create;
        PartsArray.AddElement(TJSONObject.Create.AddPair('text', Prompt.Text));
        ContentsArray.AddElement(TJSONObject.Create.AddPair('parts', PartsArray));
        JSONBody.AddPair('contents', ContentsArray);

        RESTRequest.Params.ParameterByName('body4E6B89C7FD1E4198BD64C5BE65C5188E').Value := JSONBody.ToString;
      finally
        JSONBody.Free;
        Prompt.Free;
        Complemento.Free;
      end;
            
      RESTRequest.Execute;
      {$EndRegion}    
      {$Region 'Retorno'}
        Retorno := RESTRequest.Response.JSONValue as TJSONObject;

        Candidates := Retorno.GetValue<TJSONArray>('candidates');
        if Candidates.Count > 0 then
        begin
          Content := Candidates.Items[0].GetValue<TJSONObject>('content');
          Parts := Content.GetValue<TJSONArray>('parts');
          if Parts.Count > 0 then
          begin
            SQL := Parts.Items[0].GetValue<string>('text');
            SQL := StringReplace(SQL, '```sql', '', [rfReplaceAll, rfIgnoreCase]);
            SQL := StringReplace(SQL, '```'   , '', [rfReplaceAll, rfIgnoreCase]);
          end;
        end;
       {$EndRegion 'Retorno'}

      if Devolver = 'JSON' then
       Render(ExecuteSQL(SQL))
      else
       Render(SQL);

    end;
  finally
    FreeAndNil(DMConexao);
  end;

 {$EndRegion} 
end;

end.
