unit Controller.Customer;

interface

uses
  MVCFramework,
  MVCFramework.Commons,
  MVCFramework.Serializer.Commons,
  System.Generics.Collections;

type
  [MVCNameCase(ncCamelCase)]
  TPerson = class
  private
//    fFirstName: String;
//    fLastName: String;
//    fDOB: TDate;
  public
//    property FirstName: String read fFirstName write fFirstName;
//    property LastName: String read fLastName write fLastName;
//    property DOB: TDate read fDOB write fDOB;
//    constructor Create(FirstName, LastName: String; DOB: TDate);
  end;

  [MVCPath('/api')]
  TCustomer = class(TMVCController)
  public
    //
  protected
    procedure OnBeforeAction(Context: TWebContext; const AActionName: string; var Handled: Boolean); override;
    procedure OnAfterAction(Context: TWebContext; const AActionName: string); override;

  public
    [MVCPath('/perguntar')]
    [MVCHTTPMethod([httpPOST])]
    procedure CreatePerson([MVCFromBody] Person: TPerson);
  end;

implementation

uses
  System.SysUtils,
  MVCFramework.Logger,
  System.StrUtils,
  JsonDataObjects,
  System.JSON;

procedure TCustomer.OnAfterAction(Context: TWebContext; const AActionName: string);
begin
  inherited;
end;

procedure TCustomer.OnBeforeAction(Context: TWebContext; const AActionName: string; var Handled: Boolean);
begin
  inherited;
end;

procedure TCustomer.CreatePerson([MVCFromBody] Person: TPerson);
var
  Response: TJSONObject;
begin
  Response := TJSONObject.Create;
  try
    Response.AddPair('message', 'Person created successfully');
    Response.AddPair('firstName', 'AMANCIO');
    Response.AddPair('lastName', 'AQUINO');
    Response.AddPair('dob', '2025-02-02'); // Converte para string ISO

    Render(Response);
  finally
    //
  end;
end;

//constructor TPerson.Create(FirstName, LastName: String; DOB: TDate);
//begin
//  inherited Create;
//  fFirstName := FirstName;
//  fLastName := LastName;
//  fDOB := DOB;
//end;

end.
